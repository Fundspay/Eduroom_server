"use strict";

const AWS = require("aws-sdk");
const puppeteer = require("puppeteer");
const CONFIG = require("../config/config");
const fs = require("fs");
const path = require("path");

const s3 = new AWS.S3({
  accessKeyId: CONFIG.awsAccessKeyId,
  secretAccessKey: CONFIG.awsSecretAccessKey,
  region: CONFIG.awsRegion,
});

const ASSET_BASE = CONFIG.assetBase || "https://fundsweb.s3.ap-south-1.amazonaws.com/fundsroom/assets";

// Load background image as Base64
let BASE64_BG = "";
try {
  const bgPath = path.join(__dirname, "../assets/internshipbg.png");
  const bgData = fs.readFileSync(bgPath);
  BASE64_BG = `data:image/png;base64,${bgData.toString("base64")}`;
} catch (err) {
  console.warn("Could not load background image, proceeding without it");
  BASE64_BG = "";
}

const escapeHtml = (str) => {
  if (str === null || typeof str === "undefined") return "";
  return String(str).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
};

const formatDateReadable = (input) => {
  if (!input) return "";
  const d = new Date(input);
  if (isNaN(d.getTime())) return "";
  return d.toLocaleDateString("en-GB", { day: "numeric", month: "short", year: "numeric" });
};

const generateSessionReport = async (sessionData = {}, options = {}) => {
  const {
    userId,
    userName,
    domainName,
    courseId,
    courseName,
    day,
    sessionNumber,
    sessionTitle,
    sessionDuration,
    startDate,
    endDate,
    mcqs = [],
    caseStudyResult = null,
  } = sessionData;

  const bgUrl = BASE64_BG || options.bgUrl || "";
  const title = `${courseName || ""} Internship Report – Session ${sessionNumber}`;

  // Build HTML
  const html = `
  <!doctype html>
  <html>
  <head>
    <meta charset="utf-8"/>
    <title>${escapeHtml(title)}</title>
    <style>
      @page { size: A4; margin: 20mm 15mm; }
      html, body { margin:0; padding:0; font-family: "Times New Roman", serif; color: #222; }
      body { background: #fff; }
      .page {
        position: relative;
        padding: 12mm;
        background-image: url("${bgUrl}");
        background-repeat: no-repeat;
        background-position: center top;
        background-size: cover;
        min-height: 100%;
        box-sizing: border-box;
      }
      .main-title { font-size: 20px; font-weight: 700; margin: 8px 0 12px 0; }
      .meta { font-size: 14px; line-height: 1.6; margin-bottom: 12px; }
      .meta b { font-weight: 700; }
      hr { border:none; border-top:1px solid #cfcfcf; margin:12px 0; }
      h3.section-title { font-size:16px; margin:8px 0; }
      .question { margin:8px 0; }
      .options { margin-left:20px; margin-top:6px; }
      .option { margin:4px 0; }
      .correct { color:green; font-weight:600; }
      .answer-block { margin-top:6px; font-style:normal; }
      .case-study { margin-top:12px; padding:8px; border-left:3px solid #ddd; background: rgba(255,255,255,0.8); }
      .footer { text-align:center; font-size:11px; color:#666; margin-top:10px; }
    </style>
  </head>
  <body>
    <div class="page">
      <div class="main-title">${escapeHtml(title)}</div>
      <div class="meta">
        <div><b>Intern Name:</b> ${escapeHtml(userName||"")}</div>
        <div><b>Domain:</b> ${escapeHtml(domainName||"")}</div>
        <div><b>Course:</b> ${escapeHtml(courseName||"")}</div>
        <div><b>Session:</b> Session ${escapeHtml(String(sessionNumber||""))} ${sessionTitle? "– " + escapeHtml(sessionTitle): ""}</div>
        <div><b>Video Duration:</b> ${escapeHtml(sessionDuration||"")}</div>
        <div><b>Start Date:</b> ${escapeHtml(formatDateReadable(startDate))} <b>End Date:</b> ${escapeHtml(formatDateReadable(endDate))}</div>
      </div>
      <hr/>
      <div>
        <h3 class="section-title">1. MCQ Quiz – Session ${escapeHtml(String(sessionNumber||""))}</h3>
        ${mcqs.length ? mcqs.map((q, idx)=>{
          const opts = Array.isArray(q.options)? q.options : [];
          const correct = q.correctAnswer||"";
          return `<div class="question">
            <div><b>Question ${idx+1}:</b> ${escapeHtml(q.question||`Question ${idx+1}`)}</div>
            <div class="options">
              ${opts.map((opt,j)=>`<div class="option">${j+1}. ${escapeHtml(opt)}${opt==correct? ' <span class="correct">(Correct)</span>': ''}</div>`).join("")}
            </div>
            <div class="answer-block"><b>Answer:</b> ${escapeHtml(correct)}</div>
          </div>`
        }).join("") : `<div><i>No MCQ data available.</i></div>`}
      </div>
      ${caseStudyResult? `<div class="case-study">
        <h3 class="section-title">2. Case Study</h3>
        <div><b>Match Percentage:</b> ${escapeHtml(String(caseStudyResult.matchPercentage||""))}%</div>
        ${caseStudyResult.summary? `<div><b>Summary:</b> ${escapeHtml(caseStudyResult.summary)}</div>` : ""}
      </div>` : ""}
      <div class="footer">Generated by FundsWeb · ${escapeHtml(new Date().toLocaleDateString("en-GB"))}</div>
    </div>
  </body>
  </html>
  `;

  // PDF generation with retry
  const generatePdfBuffer = async () => {
    const maxRetries = 2;
    let attempt = 0;

    while(attempt <= maxRetries){
      try {
        const browser = await puppeteer.launch({ headless:true, args:["--no-sandbox","--disable-setuid-sandbox"] });
        const page = await browser.newPage();
        page.setDefaultNavigationTimeout(60000);
        page.setDefaultTimeout(60000);

        await page.setContent(html, { waitUntil:"networkidle0" });
        await page.evaluateHandle("document.fonts.ready");
        await new Promise(r=>setTimeout(r,500));

        const pdfBuffer = await page.pdf({ format:"A4", printBackground:true, margin:{top:"15mm", bottom:"20mm", left:"12mm", right:"12mm"} });

        await page.close();
        await browser.close();
        return pdfBuffer;
      } catch(err){
        attempt++;
        if(attempt>maxRetries) throw new Error("PDF generation failed: " + err.message);
      }
    }
  };

  const pdfBuffer = await generatePdfBuffer();

  // Upload to S3
  const safeCourseId = courseId? String(courseId) : "generic";
  const fileName = `session-${day||"d"}-s${sessionNumber||"0"}.pdf`;
  const s3KeyPrefix = options.bucketPrefix || `internshipReports/${userId}/course-${safeCourseId}`;
  const s3Key = `${s3KeyPrefix}/${fileName}`;

  await s3.putObject({
    Bucket:"fundsweb",
    Key:s3Key,
    Body: pdfBuffer,
    ContentType:"application/pdf"
  }).promise();

  return { fileName, fileUrl:`https://fundsweb.s3.ap-south-1.amazonaws.com/${s3Key}`, s3Key };
};

module.exports = { generateSessionReport };
